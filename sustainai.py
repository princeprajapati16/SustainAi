# -*- coding: utf-8 -*-
"""SustainAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lwdvza5f0Zp0uIBoxfFxJlcggUNpULho
"""

import pandas as pd
df = pd.read_csv("AI_Lifecycle_Analyzer_Dataset.csv")

print("First 5 rows of the dataset:")
print(df.head())

print("Dataset Info:")
print(df.info())

print("Descriptive Statistics:")
print(df.describe())

print(" Dataset Shape:")
print(f"Rows: {df.shape[0]}, Columns: {df.shape[1]}")

print("Column Names:")
print(df.columns.tolist())

print("Missing Values in Each Column:")
print(df.isnull().sum())

duplicates = df.duplicated().sum()
print(f" Number of duplicate rows: {duplicates}")

# Data Transformation

# Show unique categories before encoding
print(" Unique values before encoding:")
print("\nProduct_Name:", df['Product_Name'].unique())
print("Material:", df['Material'].unique())
print("Disposal_Method:", df['Disposal_Method'].unique())
print("Manufacturing_Country:", df['Manufacturing_Country'].unique())

# Apply One-Hot Encoding to categorical columns
df_encoded = pd.get_dummies(df,
                            columns=['Product_Name', 'Material', 'Disposal_Method', 'Manufacturing_Country'],
                            drop_first=True)

# shape after encoding
print(f"\nDataset shape after one-hot encoding: {df_encoded.shape}")

print("\n Encoded Data Sample:")
print(df_encoded.head())

# Feature Engineering

# 1. Create a new column: Impact_per_Year
# It shows how much carbon footprint is produced per year of product lifespan
df_encoded['Impact_per_Year'] = df['Carbon_Footprint_kgCO2'] / df['Lifespan_Years']

# 2. Create another column: Eco_Index
# A custom sustainability index: higher = better
df_encoded['Eco_Index'] = (df['Sustainability_Rating'] * 5) / (df['Carbon_Footprint_kgCO2'] + df['Waste_Generated_kg'])

# 3. Round the new columns to 3 decimal places for readability
df_encoded['Impact_per_Year'] = df_encoded['Impact_per_Year'].round(3)
df_encoded['Eco_Index'] = df_encoded['Eco_Index'].round(3)

# 4. View the new columns
print(" Sample of new features (Impact_per_Year & Eco_Index):")
print(df_encoded[['Impact_per_Year', 'Eco_Index']].head())

# Save the updated dataset with new features
df_encoded.to_csv("AI_Lifecycle_Analyzer_Updated.csv", index=False)
print(" Updated dataset saved as 'AI_Lifecycle_Analyzer_Updated.csv'")

"""This histogram shows how carbon footprint values are distributed across products, helping identify common impact levels and detect skewness in emissions."""

import seaborn as sns
import matplotlib.pyplot as plt

# Set seaborn style
sns.set(style="whitegrid")

# Create histogram with KDE (density curve)
plt.figure(figsize=(10, 6))
sns.histplot(df['Carbon_Footprint_kgCO2'], kde=True, color='skyblue', bins=30)
plt.title("Distribution of Carbon Footprint (kgCO₂)", fontsize=14)
plt.xlabel("Carbon Footprint (kgCO₂)")
plt.ylabel("Number of Products")
plt.grid(True)
plt.show()

"""This box plot shows how sustainability ratings vary across product types, revealing which products are generally more or less eco-friendly."""

# Set seaborn style
sns.set(style="whitegrid")

# Create box plot
plt.figure(figsize=(12, 6))
sns.boxplot(x='Product_Name', y='Sustainability_Rating', data=df, palette='Set3')
plt.title("Sustainability Rating by Product Type", fontsize=14)
plt.xlabel("Product Type")
plt.ylabel("Sustainability Rating")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

"""This bar chart compares the average carbon emissions of each product type, highlighting the most and least environmentally impactful categories.


"""

# Group by product and calculate average carbon footprint
avg_impact = df.groupby('Product_Name')['Carbon_Footprint_kgCO2'].mean().sort_values()

# Plot horizontal bar chart
plt.figure(figsize=(10, 6))
avg_impact.plot(kind='barh', color='skyblue')
plt.title("Average Carbon Footprint by Product Type", fontsize=14)
plt.xlabel("Average Carbon Footprint (kgCO₂)")
plt.ylabel("Product Type")
plt.grid(True)
plt.tight_layout()
plt.show()

"""This heatmap visualizes correlations among numeric features, helping detect strong relationships that influence sustainability and environmental impact.


"""

# Compute correlation matrix
correlation = df.select_dtypes(include='number').corr()

# Plot heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Heatmap of Numeric Features", fontsize=14)
plt.tight_layout()
plt.show()

"""This pie chart shows the percentage of products using different disposal methods, revealing the dominance of recycling, landfilling, or other techniques.


"""

# Create pie chart
plt.figure(figsize=(8, 8))
df['Disposal_Method'].value_counts().plot.pie(
    autopct='%1.1f%%',
    startangle=90,
    colors=['#77dd77', '#ff6961', '#fdfd96', '#84b6f4'],
    wedgeprops=dict(width=0.5)
)
plt.title("Distribution of Disposal Methods", fontsize=14)
plt.ylabel("")  # Hide y-label
plt.tight_layout()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

import pandas as pd
from sklearn.model_selection import train_test_split
df_encoded = pd.read_csv("AI_Lifecycle_Analyzer_Updated.csv")
X = df_encoded.drop(['Sustainability_Rating', 'Product_ID'], axis=1)
y = df_encoded['Sustainability_Rating']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print(f"Train shape: {X_train.shape}")
print(f"Test shape: {X_test.shape}")

from sklearn.ensemble import RandomForestRegressor
# initialize Random Forest
model = RandomForestRegressor(n_estimators=100, random_state=42)

from sklearn.metrics import mean_squared_error, r2_score

#Train the model
model.fit(X_train, y_train)

#Make predictions
y_pred = model.predict(X_test)

#  Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.3f}")
print(f"R² Score: {r2:.3f}")

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()],
         [y_test.min(), y_test.max()],
         color='red', lw=2)
plt.xlabel('Actual Sustainability Rating')
plt.ylabel('Predicted Sustainability Rating')
plt.title('Actual vs Predicted Sustainability Ratings')
plt.grid(True)
plt.show()

import unittest

def calculate_impact_per_year(carbon_footprint, lifespan):
    if lifespan == 0:
        return float('inf')  # Handle division by zero
    return round(carbon_footprint / lifespan, 3)

def calculate_eco_index(sustainability_rating, carbon_footprint, waste_generated):
    denominator = carbon_footprint + waste_generated
    if denominator == 0:
        return float('inf')  # Handle division by zero
    return round((sustainability_rating * 5) / denominator, 3)


class TestSustainabilityMetrics(unittest.TestCase):

    def test_impact_per_year(self):
        self.assertEqual(calculate_impact_per_year(100, 10), 10.000)
        self.assertEqual(calculate_impact_per_year(45, 9), 5.000)
        self.assertEqual(calculate_impact_per_year(0, 5), 0.000)
        self.assertEqual(calculate_impact_per_year(100, 0), float('inf'))  # edge case

    def test_eco_index(self):
        self.assertEqual(calculate_eco_index(4, 20, 10), round((4*5)/30, 3))
        self.assertEqual(calculate_eco_index(3, 15, 15), round((3*5)/30, 3))
        self.assertEqual(calculate_eco_index(0, 10, 5), 0.000)
        self.assertEqual(calculate_eco_index(5, 0, 0), float('inf'))  # edge case

if __name__ == "__main__":
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

def calculate_impact_per_year(carbon_footprint, lifespan):
    if lifespan == 0:
        return float('inf')
    return round(carbon_footprint / lifespan, 3)

def calculate_eco_index(sustainability_rating, carbon_footprint, waste_generated):
    denominator = carbon_footprint + waste_generated
    if denominator == 0:
        return float('inf')
    return round((sustainability_rating * 5) / denominator, 3)

# Sample input values (you can change these)
carbon_footprint = 120.0  # in kg CO2
lifespan = 12.0            # in years
sustainability_rating = 3.5  # scale (e.g., 1–5)
waste_generated = 30.0     # in kg

# Calculate predictions
impact_per_year = calculate_impact_per_year(carbon_footprint, lifespan)
eco_index = calculate_eco_index(sustainability_rating, carbon_footprint, waste_generated)

# Print results
print(f"Predicted Impact per Year: {impact_per_year}")
print(f"Predicted Eco Index: {eco_index}")

import joblib
import os

# Create the 'models' directory if it doesn't exist
if not os.path.exists('models'):
    os.makedirs('models')

# Save the trained model
joblib.dump(model, "models/sustainability_rf_model.pkl")

print("Trained model saved as 'models/sustainability_rf_model.pkl'")

import pandas as pd
import joblib

# Load the model
model = joblib.load("models/sustainability_rf_model.pkl")

# Create input data
new_data = pd.DataFrame([{
    'Product_Name': 'Smartphone',
    'Material': 'Plastic',
    'Weight_kg': 0.3,
    'Energy_Consumption_kWh': 120,
    'Water_Usage_Liters': 800,
    'Carbon_Footprint_kgCO2': 45,
    'Waste_Generated_kg': 0.8,
    'Manufacturing_Country': 'China',
    'Disposal_Method': 'Recycled',
    'Lifespan_Years': 4
}])

# Engineer feature
new_data['Impact_per_Year'] = new_data['Carbon_Footprint_kgCO2'] / new_data['Lifespan_Years']

# One-hot encode categorical columns (align with training set)
new_data_encoded = pd.get_dummies(new_data)
# Match model columns (fill missing ones with 0)
model_features = model.feature_names_in_
for col in model_features:
    if col not in new_data_encoded.columns:
        new_data_encoded[col] = 0
new_data_encoded = new_data_encoded[model_features]

# Predict
predicted_rating = model.predict(new_data_encoded)[0]
print("🔍 Predicted Sustainability Rating:", round(predicted_rating, 2))
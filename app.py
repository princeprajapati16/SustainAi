# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jASYotNe3t_MShN1G9pIaGstgFT4t92
"""

import joblib
import os

# Create the 'models' directory if it doesn't exist
if not os.path.exists('models'):
    os.makedirs('models')

# Save the trained model
joblib.dump(model, "models/sustainability_rf_model.pkl")

print("Trained model saved as 'models/sustainability_rf_model.pkl'")

import streamlit as st
import pandas as pd
import joblib

# Load the trained model
# Ensure you replace "models/sustainability_rf_model.pkl" with the correct path if you saved your model elsewhere
try:
    model = joblib.load("models/sustainability_rf_model.pkl")
except FileNotFoundError:
    st.error("Model file not found. Please make sure 'models/sustainability_rf_model.pkl' exists.")
    st.stop()
except Exception as e:
    st.error(f"Error loading the model: {e}")
    st.stop()


st.title("ðŸŒ± AI-Powered Lifecycle Analyzer")
st.markdown("Predict the sustainability rating of a product based on lifecycle data.")

# Input widgets - define all possible values for categorical features
product_options = ["Smartphone", "Laptop", "T-Shirt", "Plastic Bottle", "LED Bulb", "Desk Chair", "Refrigerator", "Sneakers"]
material_options = ["Plastic", "Metal", "Cotton", "Glass", "Polyester", "Leather", "Wood"]
country_options = ["India", "China", "Germany", "USA", "Vietnam", "Bangladesh"]
disposal_options = ["Recycled", "Landfill", "Incinerated", "Reused"]


product_name = st.selectbox("Product Name", product_options)
material = st.selectbox("Material", material_options)
manufacturing_country = st.selectbox("Manufacturing Country", country_options)
disposal_method = st.selectbox("Disposal Method", disposal_options)
weight = st.slider("Weight (kg)", 0.1, 20.0, 1.0)
energy = st.slider("Energy Consumption (kWh)", 5.0, 2000.0, 100.0)
water = st.slider("Water Usage (Liters)", 10.0, 5000.0, 500.0)
carbon = st.slider("Carbon Footprint (kgCOâ‚‚)", 1.0, 1000.0, 50.0)
waste = st.slider("Waste Generated (kg)", 0.05, 15.0, 1.0)
lifespan = st.slider("Lifespan (Years)", 1, 15, 5)

# Prepare input DataFrame
df = pd.DataFrame([{
    "Product_Name": product_name,
    "Material": material,
    "Weight_kg": weight,
    "Energy_Consumption_kWh": energy,
    "Water_Usage_Liters": water,
    "Carbon_Footprint_kgCO2": carbon,
    "Waste_Generated_kg": waste,
    "Manufacturing_Country": manufacturing_country,
    "Disposal_Method": disposal_method,
    "Lifespan_Years": lifespan,
}])

# Calculate Impact_per_Year
df['Impact_per_Year'] = df['Carbon_Footprint_kgCO2'] / df['Lifespan_Years']


# One-hot encoding (matching possible training features)
# Create dummy columns for all possible categories, filling with 0 for unseen categories
df_encoded = pd.get_dummies(df, columns=['Product_Name', 'Material', 'Manufacturing_Country', 'Disposal_Method'])

# Ensure all possible columns from training data (based on options) are present, fill missing with 0
# This assumes the model was trained on data with all these possible categories
all_possible_columns = [
    'Weight_kg', 'Energy_Consumption_kWh', 'Water_Usage_Liters',
    'Carbon_Footprint_kgCO2', 'Waste_Generated_kg', 'Lifespan_Years', 'Impact_per_Year'
]
for option in product_options:
    all_possible_columns.append(f'Product_Name_{option}')
for option in material_options:
    all_possible_columns.append(f'Material_{option}')
for option in country_options:
    all_possible_columns.append(f'Manufacturing_Country_{option}')
for option in disposal_options:
    all_possible_columns.append(f'Disposal_Method_{option}')


for col in all_possible_columns:
    if col not in df_encoded.columns:
        df_encoded[col] = 0

# Reorder columns to match the order the model was trained on (if known, otherwise alphabetical is common)
# For robustness, it's best to save the training columns order and use it here.
# As a fallback, sorting alphabetically is a common approach if the exact order isn't available.
# Assuming alphabetical order for now.
df_encoded = df_encoded[sorted(df_encoded.columns)] # This is a simplification, ideally match training order


# Predict on button click
if st.button("Predict Sustainability Rating"):
    # Ensure the order of columns in df_encoded matches the training data order
    # If using a placeholder model without feature_names_in_, the column order is crucial.
    # A robust solution involves saving the training column order.
    # For this fix, assuming alphabetical order of dummy variables combined with original numerical columns
    # is sufficient given the placeholder model. If using a real trained model,
    # ensure the column order precisely matches the training data.

    try:
        rating = model.predict(df_encoded)[0]
        st.success(f"ðŸŒ¿ Predicted Sustainability Rating: {round(rating, 2)} / 5")
    except Exception as e:
        st.error(f"Error during prediction: {e}")

from sklearn.linear_model import LinearRegression

# This is a placeholder model for demonstration purposes.
# Replace this with your actual trained model.
model = LinearRegression()
print("Placeholder model created.")